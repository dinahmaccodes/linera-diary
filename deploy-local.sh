#!/bin/bash
# Local deployment script for Linera Diary
# Deploys to a local Linera network for development and testing

set -e  # Exit on error

echo "╔══════════════════════════════════════════════════════════════════════╗"
echo "║           📔 Linera Diary - Local Deployment                        ║"
echo "╚══════════════════════════════════════════════════════════════════════╝"
echo ""

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Step 1: Build
echo -e "${BLUE}Step 1: Building application...${NC}"
if [ ! -f "build.sh" ]; then
    echo -e "${RED}✗ build.sh not found${NC}"
    exit 1
fi

chmod +x build.sh
./build.sh

echo ""

# Step 2: Check/Start local network
echo -e "${BLUE}Step 2: Setting up local Linera network...${NC}"

# Check if network is already running
if pgrep -f "linera-proxy" > /dev/null 2>&1; then
    echo -e "${YELLOW}⚠ Local network already running${NC}"
    echo -e "${YELLOW}Would you like to restart it? (y/N)${NC}"
    read -r response
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
        echo -e "${BLUE}Stopping existing network...${NC}"
        pkill -f "linera-proxy" || true
        pkill -f "linera-server" || true
        sleep 2
        echo -e "${BLUE}Starting fresh network...${NC}"
        linera net up --testing-prng-seed 37
    else
        echo -e "${GREEN}✓ Using existing network${NC}"
    fi
else
    echo -e "${BLUE}Starting local network...${NC}"
    linera net up --testing-prng-seed 37
fi

echo -e "${GREEN}✓ Network ready${NC}"
echo ""

# Step 3: Deploy application
echo -e "${BLUE}Step 3: Deploying diary application...${NC}"
echo -e "${YELLOW}Publishing and creating application...${NC}"
echo ""

# The publish-and-create command automatically publishes bytecode and creates the application
DEPLOY_OUTPUT=$(linera project publish-and-create \
    target/wasm32-unknown-unknown/release/diary_backend.wasm \
    target/wasm32-unknown-unknown/release/diary_backend.wasm 2>&1)

if [ $? -ne 0 ]; then
    echo -e "${RED}✗ Deployment failed!${NC}"
    echo "$DEPLOY_OUTPUT"
    exit 1
fi

echo "$DEPLOY_OUTPUT"
echo ""
echo -e "${GREEN}✓ Application deployed!${NC}"
echo ""

# Step 4: Extract IDs from output
echo -e "${BLUE}Step 4: Extracting deployment information...${NC}"

# Try to extract Application ID - updated pattern for Linera v0.15+
APP_ID=$(echo "$DEPLOY_OUTPUT" | grep -oP "e476[a-f0-9]+:[0-9]+" | head -1)
if [ -z "$APP_ID" ]; then
    # Alternative pattern
    APP_ID=$(echo "$DEPLOY_OUTPUT" | grep -oP "[a-f0-9]{64}:[0-9]+" | head -1)
fi

# Get Chain ID from wallet
WALLET_INFO=$(linera wallet show 2>&1)
CHAIN_ID=$(echo "$WALLET_INFO" | grep -oP "Default: \K[a-f0-9]+" | head -1)
if [ -z "$CHAIN_ID" ]; then
    CHAIN_ID=$(echo "$WALLET_INFO" | grep -oP "Chain: \K[a-f0-9]+" | head -1)
fi
if [ -z "$CHAIN_ID" ]; then
    # Try getting from the deployment output
    CHAIN_ID=$(echo "$DEPLOY_OUTPUT" | grep -oP "chain [a-f0-9]+" | grep -oP "[a-f0-9]+" | head -1)
fi

if [ -z "$APP_ID" ]; then
    echo -e "${YELLOW}⚠ Could not auto-extract Application ID${NC}"
    echo -e "${YELLOW}Please note it from the output above${NC}"
    echo ""
    echo -e "${BLUE}Application ID format: <bytecode-id>:<creation-chain>${NC}"
    echo -e "${YELLOW}Look for lines like: 'Created application <ID>'${NC}"
    APP_ID="YOUR_APPLICATION_ID_HERE"
fi

if [ -z "$CHAIN_ID" ]; then
    echo -e "${YELLOW}⚠ Could not auto-extract Chain ID${NC}"
    echo -e "${YELLOW}Please get it with: linera wallet show${NC}"
    CHAIN_ID="YOUR_CHAIN_ID_HERE"
fi

echo -e "${GREEN}Application ID: ${YELLOW}$APP_ID${NC}"
echo -e "${GREEN}Chain ID: ${YELLOW}$CHAIN_ID${NC}"
echo ""

# Step 5: Create frontend configuration
echo -e "${BLUE}Step 5: Configuring frontend...${NC}"

cat > client/config.js << EOF
// Linera Diary Configuration
// Auto-generated by deploy-local.sh on $(date)

export const CONFIG = {
  // Application and Chain IDs from deployment
  APPLICATION_ID: '$APP_ID',
  CHAIN_ID: '$CHAIN_ID',
  
  // Local Linera service
  SERVICE_URL: 'http://localhost:8080',
  GRAPHQL_ENDPOINT: 'http://localhost:8080/chains/$CHAIN_ID/applications/$APP_ID',
  
  // Application settings
  MAX_TITLE_LENGTH: 100,
  MAX_CONTENT_LENGTH: 5000,
  TOAST_DURATION: 3000,
};

export default CONFIG;
EOF

echo -e "${GREEN}✓ Frontend configured: client/config.js${NC}"
echo ""

# Step 6: Create deployment info file
cat > DEPLOYMENT_INFO.md << EOF
# 📔 Linera Diary - Deployment Information

**Deployed:** $(date)
**Network:** Local Development Network

## Application Details

- **Application ID:** \`$APP_ID\`
- **Chain ID:** \`$CHAIN_ID\`
- **GraphQL Endpoint:** \`http://localhost:8080/chains/$CHAIN_ID/applications/$APP_ID\`

## Service Information

- **Linera Service URL:** \`http://localhost:8080\`
- **Network Type:** Local Devnet
- **Deployment Type:** Development

## Quick Commands

### Start the GraphQL Service
\`\`\`bash
linera service --port 8080
\`\`\`

### Query the Diary (Example)
\`\`\`bash
curl -X POST http://localhost:8080/chains/$CHAIN_ID/applications/$APP_ID \\
  -H "Content-Type: application/json" \\
  -d '{"query": "{ entries { id title content timestamp } }"}'
\`\`\`

### Open Frontend
\`\`\`bash
# Option 1: Direct file
open client/index.html

# Option 2: With local server
python3 -m http.server 3000 -d client
# Then visit: http://localhost:3000
\`\`\`

## Next Steps

1. **Start the service:** \`./start-service.sh\`
2. **Open the UI:** Open \`client/index.html\` in your browser
3. **Initialize diary:** Create a secret phrase in the UI
4. **Start writing:** Add your first entry!

## Troubleshooting

### Service not connecting?
\`\`\`bash
# Check if Linera service is running
ps aux | grep linera

# Restart service
./start-service.sh
\`\`\`

### Need to redeploy?
\`\`\`bash
# Rebuild and redeploy
./build.sh && ./deploy-local.sh
\`\`\`

---
Generated by deploy-local.sh
EOF

echo -e "${GREEN}✓ Deployment info saved: DEPLOYMENT_INFO.md${NC}"
echo ""

# Success summary
echo -e "${GREEN}╔══════════════════════════════════════════════════════════════════════╗${NC}"
echo -e "${GREEN}║                 Deployment Successful! 🎉                            ║${NC}"
echo -e "${GREEN}╚══════════════════════════════════════════════════════════════════════╝${NC}"
echo ""
echo -e "${BLUE}📋 Deployment Summary:${NC}"
echo -e "  ${YELLOW}Application ID:${NC} $APP_ID"
echo -e "  ${YELLOW}Chain ID:${NC} $CHAIN_ID"
echo -e "  ${YELLOW}Configuration:${NC} client/config.js"
echo ""
echo -e "${BLUE}🚀 Next Steps:${NC}"
echo ""
echo -e "  ${GREEN}1. Start the Linera GraphQL service:${NC}"
echo -e "     ${BLUE}./start-service.sh${NC}"
echo -e "     ${YELLOW}or${NC}"
echo -e "     ${BLUE}linera service --port 8080${NC}"
echo ""
echo -e "  ${GREEN}2. Open the diary web interface:${NC}"
echo -e "     ${BLUE}Open client/index.html in your browser${NC}"
echo -e "     ${YELLOW}or${NC}"
echo -e "     ${BLUE}python3 -m http.server 3000 -d client${NC}"
echo -e "     ${YELLOW}Then visit: http://localhost:3000${NC}"
echo ""
echo -e "${BLUE}📖 Documentation:${NC}"
echo -e "  ${YELLOW}Deployment Info:${NC} DEPLOYMENT_INFO.md"
echo -e "  ${YELLOW}API Documentation:${NC} API.md"
echo -e "  ${YELLOW}Quick Reference:${NC} QUICK_REFERENCE.md"
echo ""
echo -e "${BLUE}Happy journaling! 📝${NC}"

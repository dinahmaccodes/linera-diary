#!/bin/bash
# Linera Diary - Local Deployment Script

set -e  # Exit on error

echo "╔══════════════════════════════════════════════════════════════════════╗"
echo "║             📔 Linera Diary - Deployment Script                     ║"
echo "╚══════════════════════════════════════════════════════════════════════╝"
echo ""

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Step 1: Build the contract
echo -e "${BLUE}Step 1: Building WASM contract...${NC}"
cd backend
cargo build --release --target wasm32-unknown-unknown
if [ $? -ne 0 ]; then
    echo -e "${RED}✗ Build failed!${NC}"
    exit 1
fi
echo -e "${GREEN}✓ Build complete!${NC}"
cd ..
echo ""

# Step 2: Start local network if not already running
echo -e "${BLUE}Step 2: Checking Linera network...${NC}"
if ! pgrep -f "linera-proxy" > /dev/null; then
    echo -e "${YELLOW}Starting local Linera network...${NC}"
    linera net up --testing-prng-seed 37 &
    sleep 5
    echo -e "${GREEN}✓ Network started!${NC}"
else
    echo -e "${GREEN}✓ Network already running!${NC}"
fi
echo ""

# Step 3: Publish and create application
echo -e "${BLUE}Step 3: Publishing and creating application...${NC}"
echo -e "${YELLOW}This may take a moment...${NC}"

# Use linera project publish-and-create command
APP_OUTPUT=$(linera project publish-and-create backend/target/wasm32-unknown-unknown/release/diary_backend.wasm backend/target/wasm32-unknown-unknown/release/diary_backend.wasm)

if [ $? -ne 0 ]; then
    echo -e "${RED}✗ Deployment failed!${NC}"
    echo "$APP_OUTPUT"
    exit 1
fi

echo -e "${GREEN}✓ Application deployed!${NC}"
echo ""
echo -e "${YELLOW}Deployment Output:${NC}"
echo "$APP_OUTPUT"
echo ""

# Extract Application ID
APP_ID=$(echo "$APP_OUTPUT" | grep -oP 'e476[a-f0-9]+:[0-9]+' | head -1)
if [ -z "$APP_ID" ]; then
    echo -e "${YELLOW}⚠ Could not auto-extract Application ID${NC}"
    echo -e "${YELLOW}Please check the output above and note your Application ID${NC}"
else
    echo -e "${GREEN}Application ID: ${YELLOW}$APP_ID${NC}"
fi

# Step 4: Get wallet information
echo ""
echo -e "${BLUE}Step 4: Getting wallet information...${NC}"
WALLET_OUTPUT=$(linera wallet show)
echo "$WALLET_OUTPUT"
echo ""

# Try to extract Chain ID
CHAIN_ID=$(echo "$WALLET_OUTPUT" | grep -oP 'Public Key: \K[a-f0-9]+' | head -1)
if [ -z "$CHAIN_ID" ]; then
    CHAIN_ID=$(echo "$WALLET_OUTPUT" | grep -oP 'Default chain: \K[a-f0-9]+' | head -1)
fi

if [ ! -z "$CHAIN_ID" ]; then
    echo -e "${GREEN}Chain ID: ${YELLOW}$CHAIN_ID${NC}"
fi
echo ""

# Step 5: Create frontend configuration
echo -e "${BLUE}Step 5: Creating frontend configuration...${NC}"

if [ ! -z "$APP_ID" ] && [ ! -z "$CHAIN_ID" ]; then
    cat > client/config.js << EOF
// Linera Diary Configuration
// Auto-generated by deploy.sh

export const CONFIG = {
  // Application and Chain IDs
  APPLICATION_ID: '${APP_ID}',
  CHAIN_ID: '${CHAIN_ID}',
  
  // Service configuration
  SERVICE_URL: 'http://localhost:8080',
  GRAPHQL_ENDPOINT: \`http://localhost:8080/chains/${CHAIN_ID}/applications/${APP_ID}\`,
  
  // Application settings
  MAX_TITLE_LENGTH: 100,
  MAX_CONTENT_LENGTH: 5000,
  TOAST_DURATION: 3000,
};

export default CONFIG;
EOF
    echo -e "${GREEN}✓ Configuration file created: client/config.js${NC}"
else
    echo -e "${YELLOW}⚠ Could not auto-generate config. Please update client/config.js manually${NC}"
fi
echo ""

# Step 6: Instructions for starting the service
echo -e "${BLUE}Step 6: Next Steps${NC}"
echo ""
echo -e "${GREEN}╔══════════════════════════════════════════════════════════════════════╗${NC}"
echo -e "${GREEN}║                    Deployment Successful! 🎉                         ║${NC}"
echo -e "${GREEN}╚══════════════════════════════════════════════════════════════════════╝${NC}"
echo ""
echo -e "${YELLOW}To start using your diary:${NC}"
echo ""
echo -e "1. ${BLUE}Start the Linera service:${NC}"
echo -e "   ${GREEN}linera service --port 8080${NC}"
echo ""
echo -e "2. ${BLUE}Open the frontend:${NC}"
echo -e "   ${GREEN}Open client/index.html in your browser${NC}"
echo -e "   ${GREEN}Or use: python3 -m http.server 3000 -d client${NC}"
echo ""
if [ ! -z "$APP_ID" ]; then
    echo -e "${BLUE}Application ID:${NC} ${YELLOW}$APP_ID${NC}"
fi
if [ ! -z "$CHAIN_ID" ]; then
    echo -e "${BLUE}Chain ID:${NC} ${YELLOW}$CHAIN_ID${NC}"
fi
echo ""
echo -e "${YELLOW}GraphQL Endpoint:${NC}"
if [ ! -z "$CHAIN_ID" ] && [ ! -z "$APP_ID" ]; then
    echo -e "  ${GREEN}http://localhost:8080/chains/$CHAIN_ID/applications/$APP_ID${NC}"
fi
echo ""
echo -e "${BLUE}Happy journaling! 📝${NC}"
